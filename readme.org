#+title: haxdoc

NOTE: /very/ work-in-progress

Documentation generator and source code analysis system for nim.

* Sourcetrail integration

# Latest version can be downloaded from [[https://github.com/haxscramper/haxdoc/releases/tag/refs%2Fheads%2Fmaster][releases]] page

To generate sourcetrail compilation database for a file use ~./haxdoc trail
file.nim~ - it will index *all* symbols that compiler saw during
compilation: type definitinos, procedure declarations and uses (callgraph),
uses of global variables, type fields and enums.

Generated database can be opened using [[https://www.sourcetrail.com/][sourcetrail]] - free and open-source
cross-platform source explorer.

** Troubleshooting and additional setup

*** Syntax highlighting

Sourcetrail does not come with built-in syntax highlighting for nim, so it
is necessary to install it manually by putting ~assets/nim.rules~ in
~$HOME/.config/sourcetrail/syntax_highlighting_rules~ or
~/opt/sourcetrail/share/data/syntax_highlighting_rules~

*** compilation errors

~haxdoc~ uses nim compiler API to analyze your code, so it *must* be valid
(i.e. you should be able to compile it yourself before trying to index it).

Future plans include support for 'quick' analysis - only using parsing, but
without semantic checking, but right now only /full/ analysis is performed.

*** stdlib path

For source code analysis it is necessary to have working stdlib
installation (either via choosenim or any other method). By default
chosenim version is used, so make sure you have it installed. Otherwise you
can pass location of the stdlib installation via ~--stdpath~ flag. For
example, to generate sourcetrail for nim compiler that comes with it's own
version of the stdlib you would need to do (assuming compiler is cloned
into ~Nim~ directory):

#+begin_src bash
haxdoc trail Nim/compiler/nim.nim --stdpath:Nim/lib
#+end_src

# *** dependencies

# For packages that have external dependencies - ~haxdoc~ will try to infer
# correct list of dependencies and add all required paths.

# Right now I use
# reimplementation of nimble dependency resolution algorithm - it works, but
# ideally I would like to first get to
# https://github.com/nim-lang/nimble/issues/890, and make nimble have API for
# that one.

* Planned features

** PARTIALLY IN_PROGRESS [[https://www.sourcetrail.com/][sourcetrail]] integration for code exploration [6/7]
   CLOSED: [2021-01-31 Sun 22:46]
  :PROPERTIES:
  :CREATED:  <2021-01-13 Wed 14:24>
  :END:
  :LOGBOOK:
  - State "PARTIALLY"  from              [2021-01-31 Sun 22:46] \\
    Most implementation parts are working, more implementation polish is needed
  - State "IN_PROGRESS" from "TODO"       [2021-01-13 Wed 14:24]
  :END:

- [X] Register symbol declaration in single file
- [X] Extract callgraph from simple function
- [X] Type definition
- [X] Multifile project analysis
- [X] Metaprogramming features - call generated by template
- [X] Endgame test - analyze full source code for nim compiler

- [ ] To fix/implement
  - [ ] FIX :: Positional information for procs with forward declaration
  - [ ] FIX :: Source ranges for call generated by macro/template expansion
  - [ ] FIX :: Field expressions - currently information for ~.field~
    access points to field *declaration*. Maybe this is a bug, maybe I'm
    just doing something wrong.
  - [ ] FIX :: Ingore non-critical errors during compilation, reduce
    logging output (configure using CLI switches).
  - [ ] FIX :: Use some CLI parser library - use of cligen is blocked by
    https://github.com/nim-lang/Nim/issues/16933.
  - [ ] IMPLEMENT :: Register global variables and consts
  - [ ] IMPLEMENT :: Show subtype relation between derived objects
  - [ ] IMPLEMENT :: Sourcetrail GUI integration
  - [ ] IMPLEMENT :: Write expanded (pos-semcheck) files to explicitly show
    all function calls (right now macro expansions can produce blobs of
    tightly packed calls that are almost impossible to click on. Ideally
    source code ranges should be tagged somewhere in the middle of semcheck
    (after symbol resolution, but before actual macro expansion) to be as
    useful as possible).

** WIP Documentation extractor for source code [0/2]
  :PROPERTIES:
  :CREATED:  <2021-01-13 Wed 14:24>
  :END:
  :LOGBOOK:
  - State "WIP"        from "TODO"       [2021-01-31 Sun 22:46]
  - State "TODO"       from "IN_PROGRESS" [2021-01-13 Wed 14:24]
  :END:

- [ ] Documentation extractor-as-a-libary. Provide basic API for writing
  documentation extraction software.
- [ ] Use unit tests as use examples
- [ ] Extracting additional semantic information from [[https://github.com/haxscramper/haxorg][haxorg]] documentation
  comments (metadata information like ~@ingroup{}~ annotations,
  documentation for comments, fields and so on).
- [ ] User-defined higlighting logic (special side effects, exceptions that
  developer might want to make accent on)
- [ ] Show resolved links in documentation in sourcetrail tool. Index
  ~.org~ documents as well to allow full interoperability between source
  code in documentation. It is somewhat annoying that =sourcetrail= does
  not allow to open two split panes, or edit source code directly in the
  same window, but this could be mitigated with support for suchronization
  between editors and sourcetrail viewers.

** TODO Static site generator for documentation
   :PROPERTIES:
   :CREATED:  <2021-01-13 Wed 15:14>
   :END:

- [ ] Basic implementation of simple documentation - no pretty
  configuration, can be just bare HTML
- [ ] Search implementation - can use fulltext search like [[https://github.com/nextapps-de/flexsearch][flexsearch]] in
  addition to something closer to [[https://hoogle.haskell.org/][hoogle]] for API/error search.

** TODO Change detection for software versions
   :PROPERTIES:
   :CREATED:  <2021-01-13 Wed 15:14>
   :END:

- [ ] Automatic change detection for API/implementation
- [ ] Automatic changelog documentation
